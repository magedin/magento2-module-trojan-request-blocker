<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2025 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\TrojanRequestBlocker\Service\Patterns;

use Magento\Framework\App\Filesystem\DirectoryList;
use Magento\Framework\Exception\FileSystemException;
use Magento\Framework\Filesystem\Directory\ReadFactory;

/**
 * This class tries to get the patterns from the .terms_blacklist file into the var directory.
 */
class TermsBlacklistPatterns implements PatternsInterface
{
    private const ADDITIONAL_PATTERNS_FILE = '.terms_blacklist';

    /**
     * @var array
     */
    private array $patterns = [];

    /**
     * @var DirectoryList
     */
    private DirectoryList $directoryList;

    /**
     * @var ReadFactory
     */
    private ReadFactory $directoryRead;

    /**
     * @param DirectoryList $directoryList
     * @param ReadFactory $directoryRead
     */
    public function __construct(
        DirectoryList $directoryList,
        ReadFactory $directoryRead
    ) {
        $this->directoryList = $directoryList;
        $this->directoryRead = $directoryRead;
    }

    /**
     * @inheritDoc
     */
    public function load(): array
    {
        if ($this->patterns) {
            return $this->patterns;
        }
        try {
            $varDirectory = $this->directoryList->getPath(DirectoryList::VAR_DIR);
        } catch (FileSystemException $e) {
            return $this->patterns;
        }
        $read = $this->directoryRead->create($varDirectory);
        if ($read->isExist(self::ADDITIONAL_PATTERNS_FILE) && $read->isReadable(self::ADDITIONAL_PATTERNS_FILE)) {
            $content = explode(PHP_EOL, $read->readFile(self::ADDITIONAL_PATTERNS_FILE));
            $content = array_filter($content);
            array_map(function (string $term) {
                $this->patterns[] = trim($term);
            }, $content);
            $this->patterns = array_unique($this->patterns);
        }
        return $this->patterns;
    }
}
